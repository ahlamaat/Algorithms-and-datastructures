1. Hva er tidskompleksiteten ved din løsning?
    Jeg antar at tidskompleksiteten for de tre problemstillingene, realizability,
    optimal time schedule og latest start, slack og critical tasks, er det dere er
    ute etter. For problemstillingen "realizability", så er tidskompleksiteten
    O(|V| + |E|). Årsaken til dette er at jeg traverserer gjennom outedge lista til
    en gitt task V.

    For å finne optimale time schedule, så bruke jeg topologisk sortering. Denne algoritmen
    har en tidskompleksitet på O(|V| + |E|) siden jeg bruker outedgelista. Jeg bruker en
    stack, som tar konstant tid, og hver task og kant blir behandlet kun én gang. For selve printingen,
    så vil jeg tro at tidskompleksiteten ligger på O(|V|*earliestCompletion). Jeg har en for-løkke inne i en for-løkke
    (en som looper |V| antall ganger, mens den andre traverserer gennom alle taskene).
    Dette er ikke optimalt. 


    Jeg regner ut slack og critical inne i topSortLatest(). Det tar O(|V|) for å finne
    ut av dette. Jeg traverserer gjennom alle taskene og endrer verdiene på variablene.
    Latest start sin tidskompleksitet er lik topologisk sortering. Altså, O(|V| + |E|).
    Årsaken kan du lese lenger opp.

2. Hva må til for at grafen kan produsere en optimal "time schedule"?
    For at dette skal være mulig, så må det for det første ikke være noen "cycles"
    i grafen. Man kan finne ut av dette gjennom dybe først forsøk. Vi finner time time
    schedule ved å bruke en topologisk sortering. For at denne sorteringen skal være mulig,
    så må grafen som sagt ikke ha noen cycles, og grafen må være en directed asyklisk graf.

3. Hva slags grafalgoritmer brukte du?
    Jeg tok i bruk topologisk sortering og dybde først søk.
